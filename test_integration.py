#!/usr/bin/env python3
"""Integration test script for the new Claude Code monitoring system."""

import sys
import tempfile
import time
from pathlib import Path
from datetime import datetime

# Add the project root to Python path
sys.path.insert(0, str(Path(__file__).parent))

from claude_rewind.hooks.claude_hook_manager import ClaudeHookManager
from claude_rewind.hooks.claude_interceptor import ClaudeCodeInterceptor
from claude_rewind.core.snapshot_engine import SnapshotEngine
from claude_rewind.core.models import ActionContext
from claude_rewind.core.config import PerformanceConfig


def test_claude_integration():
    """Test the complete Claude Code integration system."""
    print("üß™ Testing Claude Code Integration System")
    print("=" * 50)

    with tempfile.TemporaryDirectory() as temp_dir:
        project_root = Path(temp_dir)
        rewind_dir = project_root / ".claude-rewind"

        print(f"üìÅ Test project: {project_root}")

        # Initialize the storage directory
        rewind_dir.mkdir()
        (rewind_dir / "snapshots").mkdir()

        # Create some test files
        test_file = project_root / "test.py"
        test_file.write_text("""def hello():
    print("Hello, World!")

if __name__ == "__main__":
    hello()
""")

        print("‚úÖ Created test files")

        # Initialize components
        performance_config = PerformanceConfig()
        snapshot_engine = SnapshotEngine(project_root, rewind_dir, performance_config)
        claude_manager = ClaudeHookManager(project_root, snapshot_engine)
        claude_interceptor = ClaudeCodeInterceptor(project_root)

        print("‚úÖ Initialized components")

        # Test hook manager
        print("\nüîó Testing Hook Manager...")

        def test_pre_hook(context):
            print(f"  üî¥ PRE: {context.action_type} on {context.affected_files}")

        def test_post_hook(context):
            print(f"  üü¢ POST: {context.action_type} on {context.affected_files}")

        claude_manager.register_pre_action_hook(test_pre_hook)
        claude_manager.register_post_action_hook(test_post_hook)

        # Start monitoring
        if claude_manager.start_monitoring():
            print("‚úÖ Monitoring started successfully")
        else:
            print("‚ùå Failed to start monitoring")
            return False

        # Simulate Claude actions by modifying files
        print("\nüìù Simulating Claude actions...")

        # Modify the test file (simulates Claude Edit tool)
        time.sleep(0.5)
        test_file.write_text("""def hello():
    print("Hello, Claude Code!")

def goodbye():
    print("Goodbye!")

if __name__ == "__main__":
    hello()
    goodbye()
""")

        # Create a new file (simulates Claude Write tool)
        time.sleep(0.5)
        new_file = project_root / "claude_generated.py"
        new_file.write_text("""# This file was generated by Claude
import json

def process_data(data):
    \"\"\"Process JSON data.\"\"\"
    return json.loads(data)
""")

        # Wait a bit for detection
        time.sleep(2)

        # Test interceptor detection
        print("\nüéØ Testing Action Detection...")
        detected_actions = claude_interceptor.detect_claude_actions()

        print(f"Detected {len(detected_actions)} actions:")
        for action in detected_actions:
            print(f"  ‚Ä¢ {action.tool_name} on {action.file_paths} "
                 f"(confidence: {action.estimated_confidence:.2f}, "
                 f"method: {action.detection_method})")

        # Test session stats
        print("\nüìä Testing Session Statistics...")
        stats = claude_manager.get_session_stats()
        for key, value in stats.items():
            print(f"  {key}: {value}")

        # Test recent actions
        recent_actions = claude_manager.get_recent_actions(5)
        print(f"\nRecent actions: {len(recent_actions)}")
        for action in recent_actions:
            print(f"  ‚Ä¢ {action.action_type} at {action.timestamp.strftime('%H:%M:%S')}")

        # Stop monitoring
        if claude_manager.stop_monitoring():
            print("\n‚úÖ Monitoring stopped successfully")
        else:
            print("\n‚ö†Ô∏è  Warning: Failed to stop monitoring cleanly")

        print("\nüéâ Integration test completed successfully!")
        return True


def test_snapshot_creation():
    """Test snapshot creation with Claude context."""
    print("\nüîÑ Testing Snapshot Creation...")

    with tempfile.TemporaryDirectory() as temp_dir:
        project_root = Path(temp_dir)
        rewind_dir = project_root / ".claude-rewind"
        rewind_dir.mkdir()
        (rewind_dir / "snapshots").mkdir()

        # Create test file
        test_file = project_root / "example.py"
        test_file.write_text("# Initial content")

        # Initialize snapshot engine
        performance_config = PerformanceConfig()
        snapshot_engine = SnapshotEngine(project_root, rewind_dir, performance_config)

        # Create a snapshot with Claude context
        claude_context = ActionContext(
            action_type="edit_file",
            timestamp=datetime.now(),
            prompt_context="Claude edited example.py to add functionality",
            affected_files=[Path("example.py")],
            tool_name="claude_code",
            session_id="test_session_123"
        )

        snapshot_id = snapshot_engine.create_snapshot(claude_context)
        print(f"‚úÖ Created snapshot: {snapshot_id}")

        # Retrieve and verify snapshot
        snapshot = snapshot_engine.get_snapshot(snapshot_id)
        if snapshot:
            print(f"‚úÖ Retrieved snapshot with {len(snapshot.file_states)} files")
            print(f"   Metadata: {snapshot.metadata.action_type} at {snapshot.metadata.timestamp}")
        else:
            print("‚ùå Failed to retrieve snapshot")
            return False

        return True


if __name__ == "__main__":
    print("üöÄ Starting Claude Code Integration Tests\n")

    success = True

    try:
        if not test_claude_integration():
            success = False

        if not test_snapshot_creation():
            success = False

    except Exception as e:
        print(f"\nüí• Test failed with exception: {e}")
        import traceback
        traceback.print_exc()
        success = False

    if success:
        print("\nüéØ All tests passed! Claude Code integration is working.")
        sys.exit(0)
    else:
        print("\n‚ùå Some tests failed. Check the output above.")
        sys.exit(1)